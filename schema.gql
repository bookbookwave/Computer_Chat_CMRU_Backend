# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BannerCountAggregate {
  id: Int!
  title: Int!
  image: Int!
  link: Int!
  createAt: Int!
  updateAt: Int!
  _all: Int!
}

type BannerMaxAggregate {
  id: String
  title: String
  image: String
  link: String
  createAt: DateTime
  updateAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BannerMinAggregate {
  id: String
  title: String
  image: String
  link: String
  createAt: DateTime
  updateAt: DateTime
}

type Banner {
  id: ID!
  title: String!
  image: String!
  link: String
  createAt: DateTime!
  updateAt: DateTime!
}

type blogNews {
  id: ID!
  title: String!
  content: String!
  link: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategoryCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

type CategoryCount {
  Post: Int!
}

type CategoryMaxAggregate {
  id: String
  name: String
}

type CategoryMinAggregate {
  id: String
  name: String
}

type Category {
  id: ID!
  name: String!
  Post: [Post!]
  _count: CategoryCount!
}

type ConfigurationCountAggregate {
  id: Int!
  name: Int!
  value: Int!
  _all: Int!
}

type ConfigurationMaxAggregate {
  id: String
  name: String
  value: String
}

type ConfigurationMinAggregate {
  id: String
  name: String
  value: String
}

type Configuration {
  id: ID!
  name: String!
  value: String!
}

type DownloadAvgAggregate {
  counting: Float
}

type DownloadCategoryCount {
  Download: Int!
}

type DownloadCountAggregate {
  id: Int!
  downloadCategoryId: Int!
  link: Int!
  thumbnail: Int!
  userId: Int!
  counting: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type DownloadMaxAggregate {
  id: String
  downloadCategoryId: String
  link: String
  thumbnail: String
  userId: String
  counting: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type DownloadMinAggregate {
  id: String
  downloadCategoryId: String
  link: String
  thumbnail: String
  userId: String
  counting: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type DownloadSumAggregate {
  counting: Int
}

type Download {
  id: ID!
  downloadCategoryId: String!
  link: String!
  thumbnail: String!
  userId: String!
  counting: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  downloadCategory: DownloadCategory!
  author: User!
}

type DownloadCategoryCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

type DownloadCategoryMaxAggregate {
  id: String
  name: String
}

type DownloadCategoryMinAggregate {
  id: String
  name: String
}

type DownloadCategory {
  id: ID!
  name: String!
  Download: [Download!]
  _count: DownloadCategoryCount!
}

type FileCountAggregate {
  id: Int!
  fileName: Int!
  file: Int!
  projectId: Int!
  statusId: Int!
  comment: Int!
  createdAt: Int!
  _all: Int!
}

type FileMaxAggregate {
  id: String
  fileName: String
  file: String
  projectId: String
  statusId: String
  comment: String
  createdAt: DateTime
}

type FileMinAggregate {
  id: String
  fileName: String
  file: String
  projectId: String
  statusId: String
  comment: String
  createdAt: DateTime
}

type File {
  id: ID!
  fileName: String!
  file: String!
  projectId: String!
  statusId: String!
  comment: String!
  createdAt: DateTime!
  project: Project!
  status: ProjectStatus!
}

type loginTime {
  id: ID!
  userId: String!
  createdAt: DateTime!
  author: User!
}

type MessageCountAggregate {
  id: Int!
  message: Int!
  userId: Int!
  projectId: Int!
  messageRoomId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type MessageMaxAggregate {
  id: String
  message: String
  userId: String
  projectId: String
  messageRoomId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type MessageMinAggregate {
  id: String
  message: String
  userId: String
  projectId: String
  messageRoomId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Message {
  id: ID!
  message: String!
  userId: String!
  projectId: String
  messageRoomId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  project: Project
  messageRoom: MessageRoom
  author: User!
}

type MessageRoomCountAggregate {
  id: Int!
  _all: Int!
}

type MessageRoomCount {
  UserMessageRoom: Int!
  Message: Int!
}

type MessageRoomMaxAggregate {
  id: String
}

type MessageRoomMinAggregate {
  id: String
}

type MessageRoom {
  id: ID!
  UserMessageRoom: [UserMessageRoom!]
  Message: [Message!]
  _count: MessageRoomCount!
}

type PageAvgAggregate {
  view: Float
}

type PageCountAggregate {
  id: Int!
  title: Int!
  thumbnail: Int!
  userId: Int!
  view: Int!
  content: Int!
  createAt: Int!
  updateAt: Int!
  _all: Int!
}

type PageMaxAggregate {
  id: String
  title: String
  thumbnail: String
  userId: String
  view: Int
  content: String
  createAt: DateTime
  updateAt: DateTime
}

type PageMinAggregate {
  id: String
  title: String
  thumbnail: String
  userId: String
  view: Int
  content: String
  createAt: DateTime
  updateAt: DateTime
}

type PageSumAggregate {
  view: Int
}

type Page {
  id: ID!
  title: String!
  thumbnail: String!
  userId: String!
  view: Int!
  content: String!
  createAt: DateTime!
  updateAt: DateTime!
  author: User!
}

type PostAvgAggregate {
  view: Float
}

type PostCountAggregate {
  id: Int!
  title: Int!
  thumbnail: Int!
  userId: Int!
  categoryId: Int!
  view: Int!
  content: Int!
  createAt: Int!
  updateAt: Int!
  _all: Int!
}

type PostMaxAggregate {
  id: String
  title: String
  thumbnail: String
  userId: String
  categoryId: String
  view: Int
  content: String
  createAt: DateTime
  updateAt: DateTime
}

type PostMinAggregate {
  id: String
  title: String
  thumbnail: String
  userId: String
  categoryId: String
  view: Int
  content: String
  createAt: DateTime
  updateAt: DateTime
}

type PostSumAggregate {
  view: Int
}

type Post {
  id: ID!
  title: String!
  thumbnail: String!
  userId: String!
  categoryId: String!
  view: Int!
  content: String!
  createAt: DateTime!
  updateAt: DateTime!
  category: Category!
  author: User!
}

type BlogNewsCountAggregate {
  id: Int!
  title: Int!
  content: Int!
  link: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type BlogNewsMaxAggregate {
  id: String
  title: String
  content: String
  link: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BlogNewsMinAggregate {
  id: String
  title: String
  content: String
  link: String
  createdAt: DateTime
  updatedAt: DateTime
}

type LoginTimeCountAggregate {
  id: Int!
  userId: Int!
  createdAt: Int!
  _all: Int!
}

type LoginTimeMaxAggregate {
  id: String
  userId: String
  createdAt: DateTime
}

type LoginTimeMinAggregate {
  id: String
  userId: String
  createdAt: DateTime
}

type ProjectCountAggregate {
  id: Int!
  nameTH: Int!
  nameEN: Int!
  statusId: Int!
  typeId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ProjectCount {
  UserProject: Int!
  Message: Int!
  File: Int!
}

type ProjectMaxAggregate {
  id: String
  nameTH: String
  nameEN: String
  statusId: String
  typeId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectMinAggregate {
  id: String
  nameTH: String
  nameEN: String
  statusId: String
  typeId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectStatusCount {
  Project: Int!
  File: Int!
}

type Project {
  id: ID!
  nameTH: String!
  nameEN: String!
  statusId: String!
  typeId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  projectType: ProjectType!
  status: ProjectStatus!
  UserProject: [UserProject!]
  Message: [Message!]
  File: [File!]
  _count: ProjectCount!
}

type ProjectStatusCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

type ProjectStatusMaxAggregate {
  id: String
  name: String
}

type ProjectStatusMinAggregate {
  id: String
  name: String
}

type ProjectStatus {
  id: ID!
  name: String!
  Project: [Project!]
  File: [File!]
  _count: ProjectStatusCount!
}

type ProjectTypeCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

type ProjectTypeCount {
  Project: Int!
}

type ProjectTypeMaxAggregate {
  id: String
  name: String
}

type ProjectTypeMinAggregate {
  id: String
  name: String
}

type ProjectType {
  id: ID!
  name: String!
  Project: [Project!]
  _count: ProjectTypeCount!
}

type UserCountAggregate {
  id: Int!
  name: Int!
  email: Int!
  password: Int!
  role: Int!
  avatar: Int!
  createAt: Int!
  updateAt: Int!
  _all: Int!
}

type UserCount {
  Download: Int!
  Page: Int!
  Post: Int!
  Message: Int!
  UserProject: Int!
  loginTime: Int!
  UserMessageRoom: Int!
}

type UserMaxAggregate {
  id: String
  name: String
  email: String
  password: String
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
}

enum Role {
  ADMIN
  TEACHER
  USER
}

type UserMinAggregate {
  id: String
  name: String
  email: String
  password: String
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: Role!
  avatar: String!
  createAt: DateTime!
  updateAt: DateTime!
  Download: [Download!]
  Page: [Page!]
  Post: [Post!]
  Message: [Message!]
  UserProject: [UserProject!]
  loginTime: [loginTime!]
  UserMessageRoom: [UserMessageRoom!]
  _count: UserCount!
}

type UserMessageRoomCountAggregate {
  userId: Int!
  messageRoomId: Int!
  _all: Int!
}

type UserMessageRoomMaxAggregate {
  userId: String
  messageRoomId: String
}

type UserMessageRoomMinAggregate {
  userId: String
  messageRoomId: String
}

type UserMessageRoom {
  user: User!
  messageRoom: MessageRoom!
  userId: String!
  messageRoomId: String!
}

type UserProjectCountAggregate {
  projectId: Int!
  userId: Int!
  _all: Int!
}

type UserProjectMaxAggregate {
  projectId: String
  userId: String
}

type UserProjectMinAggregate {
  projectId: String
  userId: String
}

type UserProject {
  project: Project!
  user: User!
  projectId: String!
  userId: String!
}

type Query {
  user(id: String!): User!
  users: [User!]!
  category(id: String!): Category!
  categories: [Category!]!
  post(id: String!): Post!
  posts: [Post!]!
  page(id: String!): Page!
  pages: [Page!]!
  banner(id: String!): Banner!
  banners: [Banner!]!
  download(id: String!): Download!
  downloads: [Download!]!
  configuration(id: String!): Configuration!
  configurations: Configuration!
  downloadCategory(id: String!): DownloadCategory!
  downloadCategories: DownloadCategory!
  message(id: String!): Message!
  messages: [Message!]!
  messagesByProject(id: String!): [Message!]!
  messagesByRoom(id: String!): [Message!]!
  project(id: String!): Project!
  projects: [Project!]!
  projectsById(id: String!): [Project!]!
  fineStatus(id: String!): ProjectStatus!
  getStatus: [ProjectStatus!]!
  findProjectType(id: String!): ProjectType!
  getProjectType: [ProjectType!]!
  findUserProject(id: String!): UserProject!
  getUserProject(id: String!): [UserProject!]!
  findFile(id: String!): File!
  getFiles: [File!]!
  getFilesById(id: String!): [File!]!
  getLogs: [loginTime!]!
  getLogById(id: String!): [loginTime!]!
  findBlogNewsById(id: String!): blogNews!
  blogNews: [blogNews!]!
  findMessageRoomByRoomId(id: String!): [UserMessageRoom!]!
  findMessageRoomByUserId(id: String!): [UserMessageRoom!]!
  findMessageRoomByUserIdAndRoomId: [UserMessageRoom!]!
  findMessageRoomByUserIdAndGetUserId(id: String!): [UserMessageRoom!]!
  messageRoom(id: String!): MessageRoom!
  messageRooms: [MessageRoom!]!
}

type Mutation {
  createUser(input: UserUncheckedCreateInput!): User!
  updateUser(input: UserUncheckedCreateInput!): User!
  deleteUser(id: String!): String!
  login(input: inputLogin!): String!
  register(input: inputRegister!): String!
  createCategory(input: CategoryCreateInput!): Category!
  updateCategory(input: CategoryCreateInput!): Category!
  deleteCategory(id: String!): Boolean!
  createPost(input: PostUncheckedCreateInput!): Post!
  updatePost(input: PostUncheckedCreateInput!): Post!
  deletePost(id: String!): Boolean!
  createPage(input: PageUncheckedCreateInput!): Page!
  updatePage(input: PageUncheckedCreateInput!): Page!
  deletePage(id: String!): Boolean!
  createBanner(input: BannerCreateInput!): Banner!
  updateBanner(input: BannerCreateInput!): Banner!
  deleteBanner(id: String!): Boolean!
  createDownload(input: DownloadUncheckedCreateInput!): Download!
  updateDownload(input: DownloadUncheckedCreateInput!): Download!
  deleteDownload(id: String!): Boolean!
  createConfig(input: ConfigurationCreateInput!): Configuration!
  updateConfig(input: ConfigurationCreateInput!): Configuration!
  deleteConfig(id: String!): Boolean!
  createDownloadCategory(input: DownloadCategoryCreateInput!): DownloadCategory!
  updateDownloadCategory(input: DownloadCategoryCreateInput!): DownloadCategory!
  deleteDownloadCategory(id: String!): Boolean!
  createMessage(input: MessageUncheckedCreateInput!): Message!
  updateMessage(input: MessageUncheckedCreateInput!): Message!
  deleteMessage(id: String!): Boolean!
  createProject(input: ProjectUncheckedCreateInput!): Project!
  updateProject(input: ProjectUncheckedCreateInput!): Project!
  deleteProject(id: String!): String!
  createStatus(input: ProjectStatusUncheckedCreateInput!): ProjectStatus!
  updateStatus(input: ProjectStatusUncheckedCreateInput!): ProjectStatus!
  deleteStatus(id: String!): Boolean!
  createProjectType(input: ProjectTypeUncheckedCreateInput!): ProjectType!
  updateProjectType(input: ProjectTypeUncheckedCreateInput!): ProjectType!
  deleteProjectType(id: String!): Boolean!
  createUserProject(input: InputProjects!): Boolean!
  createFile(input: FileUncheckedCreateInput!): File!
  updateFile(input: FileUncheckedCreateInput!): File!
  deleteFile(id: String!): Boolean!
  createLogLogin(input: loginTimeUncheckedCreateInput!): loginTime!
  deleteLogLogin(id: String!): loginTime!
  createBlogNews(input: blogNewsUncheckedCreateInput!): blogNews!
  updateBlogNews(input: blogNewsUncheckedCreateInput!): blogNews!
  deleteBlogNews(id: String!): Boolean!
  createUserMessageRoom(input: UserMessageRoomUncheckedCreateInput!): UserMessageRoom!
  createManyUserMessageRoom(input: InputRooms!): Boolean!
  updateUserMessageRoom(input: UserMessageRoomUncheckedCreateInput!): UserMessageRoom!
  deleteUserMessageRoom(id: String!): Boolean!
  createMessageRoom: MessageRoom!
  deleteMessageRoom(id: String!): Boolean!
}

input UserUncheckedCreateInput {
  id: String
  name: String!
  email: String!
  password: String!
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
  Download: DownloadUncheckedCreateNestedManyWithoutAuthorInput
  Page: PageUncheckedCreateNestedManyWithoutAuthorInput
  Post: PostUncheckedCreateNestedManyWithoutAuthorInput
  Message: MessageUncheckedCreateNestedManyWithoutAuthorInput
  UserProject: UserProjectUncheckedCreateNestedManyWithoutUserInput
  loginTime: loginTimeUncheckedCreateNestedManyWithoutAuthorInput
  UserMessageRoom: UserMessageRoomUncheckedCreateNestedManyWithoutUserInput
}

input DownloadUncheckedCreateNestedManyWithoutAuthorInput {
  create: [DownloadCreateWithoutAuthorInput!]
  connectOrCreate: [DownloadCreateOrConnectWithoutAuthorInput!]
  createMany: DownloadCreateManyAuthorInputEnvelope
  connect: [DownloadWhereUniqueInput!]
}

input DownloadCreateWithoutAuthorInput {
  id: String
  link: String!
  thumbnail: String
  counting: Int
  createdAt: DateTime
  updatedAt: DateTime
  downloadCategory: DownloadCategoryCreateNestedOneWithoutDownloadInput!
}

input DownloadCategoryCreateNestedOneWithoutDownloadInput {
  create: DownloadCategoryCreateWithoutDownloadInput
  connectOrCreate: DownloadCategoryCreateOrConnectWithoutDownloadInput
  connect: DownloadCategoryWhereUniqueInput
}

input DownloadCategoryCreateWithoutDownloadInput {
  id: String
  name: String!
}

input DownloadCategoryCreateOrConnectWithoutDownloadInput {
  where: DownloadCategoryWhereUniqueInput!
  create: DownloadCategoryCreateWithoutDownloadInput!
}

input DownloadCategoryWhereUniqueInput {
  id: String
}

input DownloadCreateOrConnectWithoutAuthorInput {
  where: DownloadWhereUniqueInput!
  create: DownloadCreateWithoutAuthorInput!
}

input DownloadWhereUniqueInput {
  id: String
}

input DownloadCreateManyAuthorInputEnvelope {
  data: [DownloadCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input DownloadCreateManyAuthorInput {
  id: String
  downloadCategoryId: String!
  link: String!
  thumbnail: String
  counting: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PageUncheckedCreateNestedManyWithoutAuthorInput {
  create: [PageCreateWithoutAuthorInput!]
  connectOrCreate: [PageCreateOrConnectWithoutAuthorInput!]
  createMany: PageCreateManyAuthorInputEnvelope
  connect: [PageWhereUniqueInput!]
}

input PageCreateWithoutAuthorInput {
  id: String
  title: String!
  thumbnail: String
  view: Int
  content: String!
  createAt: DateTime
  updateAt: DateTime
}

input PageCreateOrConnectWithoutAuthorInput {
  where: PageWhereUniqueInput!
  create: PageCreateWithoutAuthorInput!
}

input PageWhereUniqueInput {
  id: String
}

input PageCreateManyAuthorInputEnvelope {
  data: [PageCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PageCreateManyAuthorInput {
  id: String
  title: String!
  thumbnail: String
  view: Int
  content: String!
  createAt: DateTime
  updateAt: DateTime
}

input PostUncheckedCreateNestedManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: String
  title: String!
  thumbnail: String
  view: Int
  content: String!
  createAt: DateTime
  updateAt: DateTime
  category: CategoryCreateNestedOneWithoutPostInput!
}

input CategoryCreateNestedOneWithoutPostInput {
  create: CategoryCreateWithoutPostInput
  connectOrCreate: CategoryCreateOrConnectWithoutPostInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutPostInput {
  id: String
  name: String!
}

input CategoryCreateOrConnectWithoutPostInput {
  where: CategoryWhereUniqueInput!
  create: CategoryCreateWithoutPostInput!
}

input CategoryWhereUniqueInput {
  id: String
}

input PostCreateOrConnectWithoutAuthorInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereUniqueInput {
  id: String
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyAuthorInput {
  id: String
  title: String!
  thumbnail: String
  categoryId: String!
  view: Int
  content: String!
  createAt: DateTime
  updateAt: DateTime
}

input MessageUncheckedCreateNestedManyWithoutAuthorInput {
  create: [MessageCreateWithoutAuthorInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutAuthorInput!]
  createMany: MessageCreateManyAuthorInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutAuthorInput {
  id: String
  message: String!
  createdAt: DateTime
  updatedAt: DateTime
  project: ProjectCreateNestedOneWithoutMessageInput
  messageRoom: MessageRoomCreateNestedOneWithoutMessageInput
}

input ProjectCreateNestedOneWithoutMessageInput {
  create: ProjectCreateWithoutMessageInput
  connectOrCreate: ProjectCreateOrConnectWithoutMessageInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutMessageInput {
  id: String
  nameTH: String!
  nameEN: String!
  createdAt: DateTime
  updatedAt: DateTime
  projectType: ProjectTypeCreateNestedOneWithoutProjectInput!
  status: ProjectStatusCreateNestedOneWithoutProjectInput!
  UserProject: UserProjectCreateNestedManyWithoutProjectInput
  File: FileCreateNestedManyWithoutProjectInput
}

input ProjectTypeCreateNestedOneWithoutProjectInput {
  create: ProjectTypeCreateWithoutProjectInput
  connectOrCreate: ProjectTypeCreateOrConnectWithoutProjectInput
  connect: ProjectTypeWhereUniqueInput
}

input ProjectTypeCreateWithoutProjectInput {
  id: String
  name: String!
}

input ProjectTypeCreateOrConnectWithoutProjectInput {
  where: ProjectTypeWhereUniqueInput!
  create: ProjectTypeCreateWithoutProjectInput!
}

input ProjectTypeWhereUniqueInput {
  id: String
}

input ProjectStatusCreateNestedOneWithoutProjectInput {
  create: ProjectStatusCreateWithoutProjectInput
  connectOrCreate: ProjectStatusCreateOrConnectWithoutProjectInput
  connect: ProjectStatusWhereUniqueInput
}

input ProjectStatusCreateWithoutProjectInput {
  id: String
  name: String!
  File: FileCreateNestedManyWithoutStatusInput
}

input FileCreateNestedManyWithoutStatusInput {
  create: [FileCreateWithoutStatusInput!]
  connectOrCreate: [FileCreateOrConnectWithoutStatusInput!]
  createMany: FileCreateManyStatusInputEnvelope
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutStatusInput {
  id: String
  fileName: String!
  file: String!
  comment: String!
  createdAt: DateTime
  project: ProjectCreateNestedOneWithoutFileInput!
}

input ProjectCreateNestedOneWithoutFileInput {
  create: ProjectCreateWithoutFileInput
  connectOrCreate: ProjectCreateOrConnectWithoutFileInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutFileInput {
  id: String
  nameTH: String!
  nameEN: String!
  createdAt: DateTime
  updatedAt: DateTime
  projectType: ProjectTypeCreateNestedOneWithoutProjectInput!
  status: ProjectStatusCreateNestedOneWithoutProjectInput!
  UserProject: UserProjectCreateNestedManyWithoutProjectInput
  Message: MessageCreateNestedManyWithoutProjectInput
}

input UserProjectCreateNestedManyWithoutProjectInput {
  create: [UserProjectCreateWithoutProjectInput!]
  connectOrCreate: [UserProjectCreateOrConnectWithoutProjectInput!]
  createMany: UserProjectCreateManyProjectInputEnvelope
  connect: [UserProjectWhereUniqueInput!]
}

input UserProjectCreateWithoutProjectInput {
  user: UserCreateNestedOneWithoutUserProjectInput!
}

input UserCreateNestedOneWithoutUserProjectInput {
  create: UserCreateWithoutUserProjectInput
  connectOrCreate: UserCreateOrConnectWithoutUserProjectInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUserProjectInput {
  id: String
  name: String!
  email: String!
  password: String!
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
  Download: DownloadCreateNestedManyWithoutAuthorInput
  Page: PageCreateNestedManyWithoutAuthorInput
  Post: PostCreateNestedManyWithoutAuthorInput
  Message: MessageCreateNestedManyWithoutAuthorInput
  loginTime: loginTimeCreateNestedManyWithoutAuthorInput
  UserMessageRoom: UserMessageRoomCreateNestedManyWithoutUserInput
}

input DownloadCreateNestedManyWithoutAuthorInput {
  create: [DownloadCreateWithoutAuthorInput!]
  connectOrCreate: [DownloadCreateOrConnectWithoutAuthorInput!]
  createMany: DownloadCreateManyAuthorInputEnvelope
  connect: [DownloadWhereUniqueInput!]
}

input PageCreateNestedManyWithoutAuthorInput {
  create: [PageCreateWithoutAuthorInput!]
  connectOrCreate: [PageCreateOrConnectWithoutAuthorInput!]
  createMany: PageCreateManyAuthorInputEnvelope
  connect: [PageWhereUniqueInput!]
}

input PostCreateNestedManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input MessageCreateNestedManyWithoutAuthorInput {
  create: [MessageCreateWithoutAuthorInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutAuthorInput!]
  createMany: MessageCreateManyAuthorInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateOrConnectWithoutAuthorInput {
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutAuthorInput!
}

input MessageWhereUniqueInput {
  id: String
}

input MessageCreateManyAuthorInputEnvelope {
  data: [MessageCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input MessageCreateManyAuthorInput {
  id: String
  message: String!
  projectId: String
  messageRoomId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input loginTimeCreateNestedManyWithoutAuthorInput {
  create: [loginTimeCreateWithoutAuthorInput!]
  connectOrCreate: [loginTimeCreateOrConnectWithoutAuthorInput!]
  createMany: loginTimeCreateManyAuthorInputEnvelope
  connect: [loginTimeWhereUniqueInput!]
}

input loginTimeCreateWithoutAuthorInput {
  id: String
  createdAt: DateTime
}

input loginTimeCreateOrConnectWithoutAuthorInput {
  where: loginTimeWhereUniqueInput!
  create: loginTimeCreateWithoutAuthorInput!
}

input loginTimeWhereUniqueInput {
  id: String
}

input loginTimeCreateManyAuthorInputEnvelope {
  data: [loginTimeCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input loginTimeCreateManyAuthorInput {
  id: String
  createdAt: DateTime
}

input UserMessageRoomCreateNestedManyWithoutUserInput {
  create: [UserMessageRoomCreateWithoutUserInput!]
  connectOrCreate: [UserMessageRoomCreateOrConnectWithoutUserInput!]
  createMany: UserMessageRoomCreateManyUserInputEnvelope
  connect: [UserMessageRoomWhereUniqueInput!]
}

input UserMessageRoomCreateWithoutUserInput {
  messageRoom: MessageRoomCreateNestedOneWithoutUserMessageRoomInput!
}

input MessageRoomCreateNestedOneWithoutUserMessageRoomInput {
  create: MessageRoomCreateWithoutUserMessageRoomInput
  connectOrCreate: MessageRoomCreateOrConnectWithoutUserMessageRoomInput
  connect: MessageRoomWhereUniqueInput
}

input MessageRoomCreateWithoutUserMessageRoomInput {
  id: String
  Message: MessageCreateNestedManyWithoutMessageRoomInput
}

input MessageCreateNestedManyWithoutMessageRoomInput {
  create: [MessageCreateWithoutMessageRoomInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutMessageRoomInput!]
  createMany: MessageCreateManyMessageRoomInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutMessageRoomInput {
  id: String
  message: String!
  createdAt: DateTime
  updatedAt: DateTime
  project: ProjectCreateNestedOneWithoutMessageInput
  author: UserCreateNestedOneWithoutMessageInput!
}

input UserCreateNestedOneWithoutMessageInput {
  create: UserCreateWithoutMessageInput
  connectOrCreate: UserCreateOrConnectWithoutMessageInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMessageInput {
  id: String
  name: String!
  email: String!
  password: String!
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
  Download: DownloadCreateNestedManyWithoutAuthorInput
  Page: PageCreateNestedManyWithoutAuthorInput
  Post: PostCreateNestedManyWithoutAuthorInput
  UserProject: UserProjectCreateNestedManyWithoutUserInput
  loginTime: loginTimeCreateNestedManyWithoutAuthorInput
  UserMessageRoom: UserMessageRoomCreateNestedManyWithoutUserInput
}

input UserProjectCreateNestedManyWithoutUserInput {
  create: [UserProjectCreateWithoutUserInput!]
  connectOrCreate: [UserProjectCreateOrConnectWithoutUserInput!]
  createMany: UserProjectCreateManyUserInputEnvelope
  connect: [UserProjectWhereUniqueInput!]
}

input UserProjectCreateWithoutUserInput {
  project: ProjectCreateNestedOneWithoutUserProjectInput!
}

input ProjectCreateNestedOneWithoutUserProjectInput {
  create: ProjectCreateWithoutUserProjectInput
  connectOrCreate: ProjectCreateOrConnectWithoutUserProjectInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutUserProjectInput {
  id: String
  nameTH: String!
  nameEN: String!
  createdAt: DateTime
  updatedAt: DateTime
  projectType: ProjectTypeCreateNestedOneWithoutProjectInput!
  status: ProjectStatusCreateNestedOneWithoutProjectInput!
  Message: MessageCreateNestedManyWithoutProjectInput
  File: FileCreateNestedManyWithoutProjectInput
}

input MessageCreateNestedManyWithoutProjectInput {
  create: [MessageCreateWithoutProjectInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutProjectInput!]
  createMany: MessageCreateManyProjectInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutProjectInput {
  id: String
  message: String!
  createdAt: DateTime
  updatedAt: DateTime
  messageRoom: MessageRoomCreateNestedOneWithoutMessageInput
  author: UserCreateNestedOneWithoutMessageInput!
}

input MessageRoomCreateNestedOneWithoutMessageInput {
  create: MessageRoomCreateWithoutMessageInput
  connectOrCreate: MessageRoomCreateOrConnectWithoutMessageInput
  connect: MessageRoomWhereUniqueInput
}

input MessageRoomCreateWithoutMessageInput {
  id: String
  UserMessageRoom: UserMessageRoomCreateNestedManyWithoutMessageRoomInput
}

input UserMessageRoomCreateNestedManyWithoutMessageRoomInput {
  create: [UserMessageRoomCreateWithoutMessageRoomInput!]
  connectOrCreate: [UserMessageRoomCreateOrConnectWithoutMessageRoomInput!]
  createMany: UserMessageRoomCreateManyMessageRoomInputEnvelope
  connect: [UserMessageRoomWhereUniqueInput!]
}

input UserMessageRoomCreateWithoutMessageRoomInput {
  user: UserCreateNestedOneWithoutUserMessageRoomInput!
}

input UserCreateNestedOneWithoutUserMessageRoomInput {
  create: UserCreateWithoutUserMessageRoomInput
  connectOrCreate: UserCreateOrConnectWithoutUserMessageRoomInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUserMessageRoomInput {
  id: String
  name: String!
  email: String!
  password: String!
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
  Download: DownloadCreateNestedManyWithoutAuthorInput
  Page: PageCreateNestedManyWithoutAuthorInput
  Post: PostCreateNestedManyWithoutAuthorInput
  Message: MessageCreateNestedManyWithoutAuthorInput
  UserProject: UserProjectCreateNestedManyWithoutUserInput
  loginTime: loginTimeCreateNestedManyWithoutAuthorInput
}

input UserCreateOrConnectWithoutUserMessageRoomInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUserMessageRoomInput!
}

input UserWhereUniqueInput {
  id: String
  email: String
}

input UserMessageRoomCreateOrConnectWithoutMessageRoomInput {
  where: UserMessageRoomWhereUniqueInput!
  create: UserMessageRoomCreateWithoutMessageRoomInput!
}

input UserMessageRoomWhereUniqueInput {
  userId_messageRoomId: UserMessageRoomUserIdMessageRoomIdCompoundUniqueInput
}

input UserMessageRoomUserIdMessageRoomIdCompoundUniqueInput {
  userId: String!
  messageRoomId: String!
}

input UserMessageRoomCreateManyMessageRoomInputEnvelope {
  data: [UserMessageRoomCreateManyMessageRoomInput!]!
  skipDuplicates: Boolean
}

input UserMessageRoomCreateManyMessageRoomInput {
  userId: String!
}

input MessageRoomCreateOrConnectWithoutMessageInput {
  where: MessageRoomWhereUniqueInput!
  create: MessageRoomCreateWithoutMessageInput!
}

input MessageRoomWhereUniqueInput {
  id: String
}

input MessageCreateOrConnectWithoutProjectInput {
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutProjectInput!
}

input MessageCreateManyProjectInputEnvelope {
  data: [MessageCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input MessageCreateManyProjectInput {
  id: String
  message: String!
  userId: String!
  messageRoomId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FileCreateNestedManyWithoutProjectInput {
  create: [FileCreateWithoutProjectInput!]
  connectOrCreate: [FileCreateOrConnectWithoutProjectInput!]
  createMany: FileCreateManyProjectInputEnvelope
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutProjectInput {
  id: String
  fileName: String!
  file: String!
  comment: String!
  createdAt: DateTime
  status: ProjectStatusCreateNestedOneWithoutFileInput!
}

input ProjectStatusCreateNestedOneWithoutFileInput {
  create: ProjectStatusCreateWithoutFileInput
  connectOrCreate: ProjectStatusCreateOrConnectWithoutFileInput
  connect: ProjectStatusWhereUniqueInput
}

input ProjectStatusCreateWithoutFileInput {
  id: String
  name: String!
  Project: ProjectCreateNestedManyWithoutStatusInput
}

input ProjectCreateNestedManyWithoutStatusInput {
  create: [ProjectCreateWithoutStatusInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutStatusInput!]
  createMany: ProjectCreateManyStatusInputEnvelope
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutStatusInput {
  id: String
  nameTH: String!
  nameEN: String!
  createdAt: DateTime
  updatedAt: DateTime
  projectType: ProjectTypeCreateNestedOneWithoutProjectInput!
  UserProject: UserProjectCreateNestedManyWithoutProjectInput
  Message: MessageCreateNestedManyWithoutProjectInput
  File: FileCreateNestedManyWithoutProjectInput
}

input ProjectCreateOrConnectWithoutStatusInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutStatusInput!
}

input ProjectWhereUniqueInput {
  id: String
}

input ProjectCreateManyStatusInputEnvelope {
  data: [ProjectCreateManyStatusInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManyStatusInput {
  id: String
  nameTH: String!
  nameEN: String!
  typeId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectStatusCreateOrConnectWithoutFileInput {
  where: ProjectStatusWhereUniqueInput!
  create: ProjectStatusCreateWithoutFileInput!
}

input ProjectStatusWhereUniqueInput {
  id: String
}

input FileCreateOrConnectWithoutProjectInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutProjectInput!
}

input FileWhereUniqueInput {
  id: String
}

input FileCreateManyProjectInputEnvelope {
  data: [FileCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input FileCreateManyProjectInput {
  id: String
  fileName: String!
  file: String!
  statusId: String!
  comment: String!
  createdAt: DateTime
}

input ProjectCreateOrConnectWithoutUserProjectInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutUserProjectInput!
}

input UserProjectCreateOrConnectWithoutUserInput {
  where: UserProjectWhereUniqueInput!
  create: UserProjectCreateWithoutUserInput!
}

input UserProjectWhereUniqueInput {
  projectId_userId: UserProjectProjectIdUserIdCompoundUniqueInput
}

input UserProjectProjectIdUserIdCompoundUniqueInput {
  projectId: String!
  userId: String!
}

input UserProjectCreateManyUserInputEnvelope {
  data: [UserProjectCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserProjectCreateManyUserInput {
  projectId: String!
}

input UserCreateOrConnectWithoutMessageInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutMessageInput!
}

input MessageCreateOrConnectWithoutMessageRoomInput {
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutMessageRoomInput!
}

input MessageCreateManyMessageRoomInputEnvelope {
  data: [MessageCreateManyMessageRoomInput!]!
  skipDuplicates: Boolean
}

input MessageCreateManyMessageRoomInput {
  id: String
  message: String!
  userId: String!
  projectId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input MessageRoomCreateOrConnectWithoutUserMessageRoomInput {
  where: MessageRoomWhereUniqueInput!
  create: MessageRoomCreateWithoutUserMessageRoomInput!
}

input UserMessageRoomCreateOrConnectWithoutUserInput {
  where: UserMessageRoomWhereUniqueInput!
  create: UserMessageRoomCreateWithoutUserInput!
}

input UserMessageRoomCreateManyUserInputEnvelope {
  data: [UserMessageRoomCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserMessageRoomCreateManyUserInput {
  messageRoomId: String!
}

input UserCreateOrConnectWithoutUserProjectInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUserProjectInput!
}

input UserProjectCreateOrConnectWithoutProjectInput {
  where: UserProjectWhereUniqueInput!
  create: UserProjectCreateWithoutProjectInput!
}

input UserProjectCreateManyProjectInputEnvelope {
  data: [UserProjectCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input UserProjectCreateManyProjectInput {
  userId: String!
}

input ProjectCreateOrConnectWithoutFileInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutFileInput!
}

input FileCreateOrConnectWithoutStatusInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutStatusInput!
}

input FileCreateManyStatusInputEnvelope {
  data: [FileCreateManyStatusInput!]!
  skipDuplicates: Boolean
}

input FileCreateManyStatusInput {
  id: String
  fileName: String!
  file: String!
  projectId: String!
  comment: String!
  createdAt: DateTime
}

input ProjectStatusCreateOrConnectWithoutProjectInput {
  where: ProjectStatusWhereUniqueInput!
  create: ProjectStatusCreateWithoutProjectInput!
}

input ProjectCreateOrConnectWithoutMessageInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutMessageInput!
}

input UserProjectUncheckedCreateNestedManyWithoutUserInput {
  create: [UserProjectCreateWithoutUserInput!]
  connectOrCreate: [UserProjectCreateOrConnectWithoutUserInput!]
  createMany: UserProjectCreateManyUserInputEnvelope
  connect: [UserProjectWhereUniqueInput!]
}

input loginTimeUncheckedCreateNestedManyWithoutAuthorInput {
  create: [loginTimeCreateWithoutAuthorInput!]
  connectOrCreate: [loginTimeCreateOrConnectWithoutAuthorInput!]
  createMany: loginTimeCreateManyAuthorInputEnvelope
  connect: [loginTimeWhereUniqueInput!]
}

input UserMessageRoomUncheckedCreateNestedManyWithoutUserInput {
  create: [UserMessageRoomCreateWithoutUserInput!]
  connectOrCreate: [UserMessageRoomCreateOrConnectWithoutUserInput!]
  createMany: UserMessageRoomCreateManyUserInputEnvelope
  connect: [UserMessageRoomWhereUniqueInput!]
}

input inputLogin {
  email: String!
  password: String!
}

input inputRegister {
  id: String
  name: String!
  email: String!
  password: String!
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
  Download: DownloadCreateNestedManyWithoutAuthorInput
  Page: PageCreateNestedManyWithoutAuthorInput
  Post: PostCreateNestedManyWithoutAuthorInput
  Message: MessageCreateNestedManyWithoutAuthorInput
  UserProject: UserProjectCreateNestedManyWithoutUserInput
  loginTime: loginTimeCreateNestedManyWithoutAuthorInput
  UserMessageRoom: UserMessageRoomCreateNestedManyWithoutUserInput
  confirmPassword: String!
}

input CategoryCreateInput {
  id: String
  name: String!
  Post: PostCreateNestedManyWithoutCategoryInput
}

input PostCreateNestedManyWithoutCategoryInput {
  create: [PostCreateWithoutCategoryInput!]
  connectOrCreate: [PostCreateOrConnectWithoutCategoryInput!]
  createMany: PostCreateManyCategoryInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutCategoryInput {
  id: String
  title: String!
  thumbnail: String
  view: Int
  content: String!
  createAt: DateTime
  updateAt: DateTime
  author: UserCreateNestedOneWithoutPostInput!
}

input UserCreateNestedOneWithoutPostInput {
  create: UserCreateWithoutPostInput
  connectOrCreate: UserCreateOrConnectWithoutPostInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostInput {
  id: String
  name: String!
  email: String!
  password: String!
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
  Download: DownloadCreateNestedManyWithoutAuthorInput
  Page: PageCreateNestedManyWithoutAuthorInput
  Message: MessageCreateNestedManyWithoutAuthorInput
  UserProject: UserProjectCreateNestedManyWithoutUserInput
  loginTime: loginTimeCreateNestedManyWithoutAuthorInput
  UserMessageRoom: UserMessageRoomCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutPostInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPostInput!
}

input PostCreateOrConnectWithoutCategoryInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutCategoryInput!
}

input PostCreateManyCategoryInputEnvelope {
  data: [PostCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyCategoryInput {
  id: String
  title: String!
  thumbnail: String
  userId: String!
  view: Int
  content: String!
  createAt: DateTime
  updateAt: DateTime
}

input PostUncheckedCreateInput {
  id: String
  title: String!
  thumbnail: String
  userId: String!
  categoryId: String!
  view: Int
  content: String!
  createAt: DateTime
  updateAt: DateTime
}

input PageUncheckedCreateInput {
  id: String
  title: String!
  thumbnail: String
  userId: String!
  view: Int
  content: String!
  createAt: DateTime
  updateAt: DateTime
}

input BannerCreateInput {
  id: String
  title: String!
  image: String
  link: String
  createAt: DateTime
  updateAt: DateTime
}

input DownloadUncheckedCreateInput {
  id: String
  downloadCategoryId: String!
  link: String!
  thumbnail: String
  userId: String!
  counting: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ConfigurationCreateInput {
  id: String
  name: String!
  value: String!
}

input DownloadCategoryCreateInput {
  id: String
  name: String!
  Download: DownloadCreateNestedManyWithoutDownloadCategoryInput
}

input DownloadCreateNestedManyWithoutDownloadCategoryInput {
  create: [DownloadCreateWithoutDownloadCategoryInput!]
  connectOrCreate: [DownloadCreateOrConnectWithoutDownloadCategoryInput!]
  createMany: DownloadCreateManyDownloadCategoryInputEnvelope
  connect: [DownloadWhereUniqueInput!]
}

input DownloadCreateWithoutDownloadCategoryInput {
  id: String
  link: String!
  thumbnail: String
  counting: Int
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateNestedOneWithoutDownloadInput!
}

input UserCreateNestedOneWithoutDownloadInput {
  create: UserCreateWithoutDownloadInput
  connectOrCreate: UserCreateOrConnectWithoutDownloadInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDownloadInput {
  id: String
  name: String!
  email: String!
  password: String!
  role: Role
  avatar: String
  createAt: DateTime
  updateAt: DateTime
  Page: PageCreateNestedManyWithoutAuthorInput
  Post: PostCreateNestedManyWithoutAuthorInput
  Message: MessageCreateNestedManyWithoutAuthorInput
  UserProject: UserProjectCreateNestedManyWithoutUserInput
  loginTime: loginTimeCreateNestedManyWithoutAuthorInput
  UserMessageRoom: UserMessageRoomCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutDownloadInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutDownloadInput!
}

input DownloadCreateOrConnectWithoutDownloadCategoryInput {
  where: DownloadWhereUniqueInput!
  create: DownloadCreateWithoutDownloadCategoryInput!
}

input DownloadCreateManyDownloadCategoryInputEnvelope {
  data: [DownloadCreateManyDownloadCategoryInput!]!
  skipDuplicates: Boolean
}

input DownloadCreateManyDownloadCategoryInput {
  id: String
  link: String!
  thumbnail: String
  userId: String!
  counting: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input MessageUncheckedCreateInput {
  id: String
  message: String!
  userId: String!
  projectId: String
  messageRoomId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectUncheckedCreateInput {
  id: String
  nameTH: String!
  nameEN: String!
  statusId: String!
  typeId: String!
  createdAt: DateTime
  updatedAt: DateTime
  UserProject: UserProjectUncheckedCreateNestedManyWithoutProjectInput
  Message: MessageUncheckedCreateNestedManyWithoutProjectInput
  File: FileUncheckedCreateNestedManyWithoutProjectInput
}

input UserProjectUncheckedCreateNestedManyWithoutProjectInput {
  create: [UserProjectCreateWithoutProjectInput!]
  connectOrCreate: [UserProjectCreateOrConnectWithoutProjectInput!]
  createMany: UserProjectCreateManyProjectInputEnvelope
  connect: [UserProjectWhereUniqueInput!]
}

input MessageUncheckedCreateNestedManyWithoutProjectInput {
  create: [MessageCreateWithoutProjectInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutProjectInput!]
  createMany: MessageCreateManyProjectInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input FileUncheckedCreateNestedManyWithoutProjectInput {
  create: [FileCreateWithoutProjectInput!]
  connectOrCreate: [FileCreateOrConnectWithoutProjectInput!]
  createMany: FileCreateManyProjectInputEnvelope
  connect: [FileWhereUniqueInput!]
}

input ProjectStatusUncheckedCreateInput {
  id: String
  name: String!
  Project: ProjectUncheckedCreateNestedManyWithoutStatusInput
  File: FileUncheckedCreateNestedManyWithoutStatusInput
}

input ProjectUncheckedCreateNestedManyWithoutStatusInput {
  create: [ProjectCreateWithoutStatusInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutStatusInput!]
  createMany: ProjectCreateManyStatusInputEnvelope
  connect: [ProjectWhereUniqueInput!]
}

input FileUncheckedCreateNestedManyWithoutStatusInput {
  create: [FileCreateWithoutStatusInput!]
  connectOrCreate: [FileCreateOrConnectWithoutStatusInput!]
  createMany: FileCreateManyStatusInputEnvelope
  connect: [FileWhereUniqueInput!]
}

input ProjectTypeUncheckedCreateInput {
  id: String
  name: String!
  Project: ProjectUncheckedCreateNestedManyWithoutProjectTypeInput
}

input ProjectUncheckedCreateNestedManyWithoutProjectTypeInput {
  create: [ProjectCreateWithoutProjectTypeInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutProjectTypeInput!]
  createMany: ProjectCreateManyProjectTypeInputEnvelope
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutProjectTypeInput {
  id: String
  nameTH: String!
  nameEN: String!
  createdAt: DateTime
  updatedAt: DateTime
  status: ProjectStatusCreateNestedOneWithoutProjectInput!
  UserProject: UserProjectCreateNestedManyWithoutProjectInput
  Message: MessageCreateNestedManyWithoutProjectInput
  File: FileCreateNestedManyWithoutProjectInput
}

input ProjectCreateOrConnectWithoutProjectTypeInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutProjectTypeInput!
}

input ProjectCreateManyProjectTypeInputEnvelope {
  data: [ProjectCreateManyProjectTypeInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManyProjectTypeInput {
  id: String
  nameTH: String!
  nameEN: String!
  statusId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input InputProjects {
  data: [UserProjectCreateManyInput!]!
}

input UserProjectCreateManyInput {
  projectId: String!
  userId: String!
}

input FileUncheckedCreateInput {
  id: String
  fileName: String!
  file: String!
  projectId: String!
  statusId: String!
  comment: String!
  createdAt: DateTime
}

input loginTimeUncheckedCreateInput {
  id: String
  userId: String!
  createdAt: DateTime
}

input blogNewsUncheckedCreateInput {
  id: String
  title: String!
  content: String!
  link: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserMessageRoomUncheckedCreateInput {
  userId: String!
  messageRoomId: String!
}

input InputRooms {
  data: [UserMessageRoomCreateManyInput!]!
}

input UserMessageRoomCreateManyInput {
  userId: String!
  messageRoomId: String!
}
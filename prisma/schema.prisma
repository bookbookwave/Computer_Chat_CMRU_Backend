generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-arm64-openssl-1.1.x", "darwin-arm64"]
}

generator nestgraphql {
  provider               = "prisma-nestjs-graphql"
  output                 = "../src/@generated"
  emitSingle             = true
  purgeOutput            = true
  // fields_Upload_from     = "graphql-upload"
  // fields_Upload_input    = true
  // fields_Upload_output   = false
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  /// @Validator.MinLength(3)
  name        String
  /// @Validator.IsEmail()
  email       String        @unique
  password    String
  role        Role          @default(USER)
  /// @FieldType('Upload.GraphQLUpload')
  /// @PropertyType('Upload.Upload')
  avatar      String        @default("https://via.placeholder.com/150*150")
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  Download    Download[]
  Page        Page[]
  Post        Post[]
  // Project     Project[]
  Message     Message[]
  // project     Project[]
  UserProject UserProject[]
}

model Category {
  id   String @id @default(cuid())
  /// @Validator.MinLength(3)
  name String
  Post Post[]
}

model Post {
  id         String   @id @default(cuid())
  title      String
  /// @FieldType('Upload.GraphQLUpload')
  /// @PropertyType('Upload.Upload')
  thumbnail  String   @default("https://via.placeholder.com/480x320")
  userId     String
  categoryId String
  view       Int      @default(0)
  /// @Validator.IsNotEmpty()
  /// @Validator.IsString()
  /// @Validator.MinLength(10)
  content    String
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id])
  author     User     @relation(fields: [userId], references: [id])
}

model Page {
  id        String   @id @default(cuid())
  title     String
  /// @FieldType('Upload.GraphQLUpload')
  /// @PropertyType('Upload.Upload')
  thumbnail String   @default("https://via.placeholder.com/480x320")
  userId    String
  view      Int      @default(0)
  /// @Validator.IsNotEmpty()
  /// @Validator.IsString()
  /// @Validator.MinLength(10)
  content   String
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  author    User     @relation(fields: [userId], references: [id])
}

model Banner {
  id       String   @id @default(cuid())
  title    String
  /// @FieldType('Upload.GraphQLUpload')
  /// @PropertyType('Upload.Upload')
  image    String
  link     String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model DownloadCategory {
  id       String     @id @default(cuid())
  /// @Validator.MinLength(3)
  name     String
  Download Download[]
}

model Download {
  id                 String           @id @default(cuid())
  downloadCategoryId String
  link               String
  /// @FieldType('Upload.GraphQLUpload')
  /// @PropertyType('Upload.Upload')
  thumbnail          String           @default("https://via.placeholder.com/150")
  userId             String
  counting           Int              @default(0)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  downloadCategory   DownloadCategory @relation(fields: [downloadCategoryId], references: [id])
  author             User             @relation(fields: [userId], references: [id])
}

model Configuration {
  id    String @id @default(cuid())
  /// @Validator.MinLength(3)
  name  String
  /// @Validator.IsNotEmpty()
  value String
}

model Project {
  id          String        @id @default(cuid())
  nameTH      String
  nameEN      String
  statusId    String
  typeId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectType ProjectType   @relation(fields: [typeId], references: [id])
  status      ProjectStatus @relation(fields: [statusId], references: [id])
  // userId      String
  // author      User          @relation(fields: [userId], references: [id])
  // author      User[]
  UserProject UserProject[]
  Message     Message[]
}

// const createPostAndCategory = await prisma.post.create({
//   data: {
//     title: 'How to become a butterfly',
//     categories: {
//       create: [{ name: 'Magic' }, { name: 'Butterflies' }],
//     },
//   },
// })
// model Post {
//   id         Int        @id @default(autoincrement())
//   title      String
//   categories Category[]
// }

// model Category {
//   id    Int    @id @default(autoincrement())
//   name  String
//   posts Post[]
// }

model UserProject {
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  projectId String
  userId    String

  @@id([projectId, userId])
}

model ProjectStatus {
  id      String    @id @default(cuid())
  name    String
  Project Project[]
}

model ProjectType {
  id      String    @id @default(cuid())
  name    String
  Project Project[]
}

// model MessageRoom {
//   id        String    @id @default(cuid())
//   name      String
//   userId    String
//   projectId String
//   project   Project   @relation(fields: [projectId], references: [id])
//   author    User      @relation(fields: [userId], references: [id])
//   Message   Message[]
// }

model Message {
  id        String   @id @default(cuid())
  message   String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  author    User     @relation(fields: [userId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  USER
}
